name: CI/CD Pipeline

# Only manual trigger on develop branch
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: choice
        required: true
        default: 'staging'
        options:
        - staging
        - production
      debug_enabled:
        description: 'Run the workflow with debug logging'
        type: boolean
        required: false
        default: false

jobs:
  lint:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: Install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
      
      - name: Run golangci-lint
        run: golangci-lint run --timeout=5m

  test:
    needs: lint
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm libelf-dev
      
      - name: Run Tests
        run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          flags: unittests
          fail_ci_if_error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: Build Binary
        run: |
          make build
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: mxtrack
          path: bin/mxtrack
          retention-days: 5

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  deploy-staging:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: mxtrack
          
      - name: Deploy to Staging
        run: echo "Deploy to staging environment"
        # Add actual deployment steps here

  deploy-production:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: mxtrack
          
      - name: Deploy to Production
        run: echo "Deploy to production environment"
        # Add actual deployment steps here
